# -*- coding: utf-8 -*-
"""DaveHuang_ COMP258Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/103OMW-Ndq0yQnd4qwEPgiU2mkVpwjLlQ
"""

from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.model_selection import cross_val_score
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.cluster import AgglomerativeClustering

face, target = fetch_olivetti_faces(data_home='./',return_X_y=True)
print(face.dtype,target.dtype)
print(face.shape,target.shape)

splitter=StratifiedShuffleSplit(test_size=0.333,random_state=0)
for data,test in splitter.split(face,target):
  x,x_test = face[data],face[test]
  y,y_test=target[data],target[test]

splitter2=StratifiedShuffleSplit(test_size=.5)
for train,val in splitter2.split(x,y):
  x_train,x_val=x[train],x[val]
  y_train,y_val=y[train],y[val]

print(x_train.size,x_val.size,x_test.size)

log_reg=LogisticRegression()
model=log_reg.fit(x_train,y_train)
print(model.score(x_val,y_val))

scores=cross_val_score(log_reg,face,target,cv=3,n_jobs=4)
print("Score: ",scores)
print("Mean: ", scores.mean())
print("Standard deviation:", scores.std())

from sklearn.metrics.cluster import silhouette_score

sil_stand=-1
sil_collect=-1
for cluster in range(20,130,10):
  agglo=AgglomerativeClustering(n_clusters=cluster,linkage='average')
  pre=agglo.fit_predict(x_train)
  sil=silhouette_score(x_val,pre)
  print('for n_cluster =', cluster, 'The silhoutte score is: ',sil)
  if sil>sil_stand:
    sil_stand=sil
    sil_collect=cluster
print('best cluster set is: ',sil_collect,sil_stand)
pr=AgglomerativeClustering(n_clusters=sil_collect,linkage='average')
pre=pr.fit_predict(x_train)

sil_stand2=-1
sil_collect2=-1
for cluster in range(20,130,10):
  agglo=AgglomerativeClustering(n_clusters=cluster,affinity='cosine',linkage='average')
  pre2=agglo.fit_predict(x_train)
  sil=silhouette_score(x_val,pre2)
  print('for n_cluster =', cluster, 'The silhoutte score is: ',sil)
  if sil>sil_stand2:
    sil_stand2=sil
    sil_collect2=cluster
print('best cluster set is: ',sil_collect2,sil_stand2)
pr=AgglomerativeClustering(n_clusters=sil_collect2,affinity='cosine',linkage='average')
pre2=pr.fit_predict(x_train)

sil_stand3=-1
sil_collect3=-1
for cluster in range(20,130,10):
  agglo=AgglomerativeClustering(n_clusters=cluster,affinity='manhattan',linkage='average')
  pre3=agglo.fit_predict(x_train)
  sil=silhouette_score(x_val,pre3)
  print('for n_cluster =', cluster, 'The silhoutte score is: ',sil)
  if sil>sil_stand3:
    sil_stand3=sil
    sil_collect3=cluster
print('best cluster set is: ',sil_collect3,sil_stand3)
pr=AgglomerativeClustering(n_clusters=sil_collect3,affinity='manhattan',linkage='average')
pre3=pr.fit_predict(x_train)

scores_eu=cross_val_score(log_reg,x_val,pre,cv=2)
print("scores:", scores_eu)
print("Mean: ", scores_eu.mean())
print("Standard deviation:", scores_eu.std())

scores_cos=cross_val_score(log_reg,x_val,pre,cv=2)
print("scores:", scores_cos)
print("Mean: ", scores_cos.mean())
print("Standard deviation:", scores_cos.std())

scores_man=cross_val_score(log_reg,x_val,pre,cv=2)
print("scores:", scores_man)
print("Mean: ", scores_man.mean())
print("Standard deviation:", scores_man.std())